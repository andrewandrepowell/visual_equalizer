-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity math_accel_Block_proc24 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_data_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_TVALID : IN STD_LOGIC;
    in_data_TREADY : OUT STD_LOGIC;
    in_tlast_V : IN STD_LOGIC_VECTOR (0 downto 0);
    in_tlast_V_out_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_tlast_V_out_full_n : IN STD_LOGIC;
    in_tlast_V_out_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of math_accel_Block_proc24 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_37 : BOOLEAN;
    signal in_data_TDATA_blk_n : STD_LOGIC;
    signal in_tlast_V_out_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_65 : BOOLEAN;
    signal grp_fu_86_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal squared_sum_reg_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_72 : BOOLEAN;
    signal grp_fu_56_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_i_reg_105 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_82 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_96 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_104 : BOOLEAN;
    signal real_1_fu_64_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal img_fu_72_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_86_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal img32_fu_82_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_86_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_i_i_fu_93_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i_fu_93_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal real32_fu_68_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i_fu_93_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_59_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_59_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_230 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component math_accel_uitodp_32s_64_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component math_accel_dlog_64ns_64ns_64_15_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component math_accel_mac_muladd_16s_16s_32s_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component math_accel_mul_mul_16s_16s_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    math_accel_uitodp_32s_64_3_U1 : component math_accel_uitodp_32s_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => squared_sum_reg_100,
        ce => ap_const_logic_1,
        dout => grp_fu_56_p1);

    math_accel_dlog_64ns_64ns_64_15_full_dsp_U2 : component math_accel_dlog_64ns_64ns_64_15_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => tmp_3_i_i_reg_105,
        ce => grp_fu_59_ce,
        dout => grp_fu_59_p2);

    math_accel_mac_muladd_16s_16s_32s_32_1_U3 : component math_accel_mac_muladd_16s_16s_32s_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_86_p0,
        din1 => grp_fu_86_p1,
        din2 => tmp_1_i_i_fu_93_p2,
        dout => grp_fu_86_p3);

    math_accel_mul_mul_16s_16s_32_1_U4 : component math_accel_mul_mul_16s_16s_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_1_i_i_fu_93_p0,
        din1 => tmp_1_i_i_fu_93_p1,
        dout => tmp_1_i_i_fu_93_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((in_tlast_V_out_full_n = ap_const_logic_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_72))) then
                squared_sum_reg_100 <= grp_fu_86_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_3_i_i_reg_105 <= grp_fu_56_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, in_tlast_V_out_full_n, ap_sig_72)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_72)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                if (not((in_tlast_V_out_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_done_reg, in_tlast_V_out_full_n, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((in_tlast_V_out_full_n = ap_const_logic_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(in_tlast_V_out_full_n, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((in_tlast_V_out_full_n = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_59_p2;

    ap_sig_104_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_104 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_230_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_230 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_37_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_37 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_65_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_65 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_72_assign_proc : process(ap_start, ap_done_reg, in_data_TVALID)
    begin
                ap_sig_72 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (in_data_TVALID = ap_const_logic_0));
    end process;


    ap_sig_82_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_82 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_96_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_96 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_65)
    begin
        if (ap_sig_65) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_37)
    begin
        if (ap_sig_37) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_96)
    begin
        if (ap_sig_96) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_230)
    begin
        if (ap_sig_230) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_82)
    begin
        if (ap_sig_82) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_104)
    begin
        if (ap_sig_104) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_59_ce_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, in_tlast_V_out_full_n, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (in_tlast_V_out_full_n = ap_const_logic_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            grp_fu_59_ce <= ap_const_logic_0;
        else 
            grp_fu_59_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_86_p0 <= img32_fu_82_p1(16 - 1 downto 0);
    grp_fu_86_p1 <= img32_fu_82_p1(16 - 1 downto 0);
        img32_fu_82_p1 <= std_logic_vector(resize(signed(img_fu_72_p4),32));

    img_fu_72_p4 <= in_data_TDATA(31 downto 16);

    in_data_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, in_data_TVALID)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            in_data_TDATA_blk_n <= in_data_TVALID;
        else 
            in_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_data_TREADY_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_72)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_72))) then 
            in_data_TREADY <= ap_const_logic_1;
        else 
            in_data_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_tlast_V_out_blk_n_assign_proc : process(in_tlast_V_out_full_n, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            in_tlast_V_out_blk_n <= in_tlast_V_out_full_n;
        else 
            in_tlast_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_tlast_V_out_din <= in_tlast_V;

    in_tlast_V_out_write_assign_proc : process(in_tlast_V_out_full_n, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((in_tlast_V_out_full_n = ap_const_logic_0)))) then 
            in_tlast_V_out_write <= ap_const_logic_1;
        else 
            in_tlast_V_out_write <= ap_const_logic_0;
        end if; 
    end process;

        real32_fu_68_p1 <= std_logic_vector(resize(signed(real_1_fu_64_p1),32));

    real_1_fu_64_p1 <= in_data_TDATA(16 - 1 downto 0);
    tmp_1_i_i_fu_93_p0 <= real32_fu_68_p1(16 - 1 downto 0);
    tmp_1_i_i_fu_93_p1 <= real32_fu_68_p1(16 - 1 downto 0);
end behav;
