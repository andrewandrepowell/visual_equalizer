-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity math_accel is
generic (
    C_S_AXI_CONTROL_INTR_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_INTR_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_control_intr_AWVALID : IN STD_LOGIC;
    s_axi_control_intr_AWREADY : OUT STD_LOGIC;
    s_axi_control_intr_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_INTR_ADDR_WIDTH-1 downto 0);
    s_axi_control_intr_WVALID : IN STD_LOGIC;
    s_axi_control_intr_WREADY : OUT STD_LOGIC;
    s_axi_control_intr_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_INTR_DATA_WIDTH-1 downto 0);
    s_axi_control_intr_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_INTR_DATA_WIDTH/8-1 downto 0);
    s_axi_control_intr_ARVALID : IN STD_LOGIC;
    s_axi_control_intr_ARREADY : OUT STD_LOGIC;
    s_axi_control_intr_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_INTR_ADDR_WIDTH-1 downto 0);
    s_axi_control_intr_RVALID : OUT STD_LOGIC;
    s_axi_control_intr_RREADY : IN STD_LOGIC;
    s_axi_control_intr_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_INTR_DATA_WIDTH-1 downto 0);
    s_axi_control_intr_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_intr_BVALID : OUT STD_LOGIC;
    s_axi_control_intr_BREADY : IN STD_LOGIC;
    s_axi_control_intr_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC );
end;


architecture behav of math_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "math_accel,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=16.414000,HLS_SYN_LAT=20,HLS_SYN_TPT=21,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=1504,HLS_SYN_LUT=3314}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_true : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_start : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_done : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_continue : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_idle : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_ready : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_in_stream_TREADY : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_last_V_2_out_out_din : STD_LOGIC_VECTOR (0 downto 0);
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_last_V_2_out_out_write : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_chn_write_math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_4_loc_channel : STD_LOGIC;
    signal tmp_4_loc_channel_full_n : STD_LOGIC;
    signal math_accel_hls_fptoui_double_i321_U0_ap_start : STD_LOGIC;
    signal math_accel_hls_fptoui_double_i321_U0_ap_done : STD_LOGIC;
    signal math_accel_hls_fptoui_double_i321_U0_ap_continue : STD_LOGIC;
    signal math_accel_hls_fptoui_double_i321_U0_ap_idle : STD_LOGIC;
    signal math_accel_hls_fptoui_double_i321_U0_ap_ready : STD_LOGIC;
    signal math_accel_hls_fptoui_double_i321_U0_return_r : STD_LOGIC_VECTOR (31 downto 0);
    signal math_accel_hls_fptoui_double_i321_U0_return_r_ap_vld : STD_LOGIC;
    signal ap_chn_write_math_accel_hls_fptoui_double_i321_U0_p_channel : STD_LOGIC;
    signal p_channel_full_n : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_start : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_done : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_continue : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_idle : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_ready : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_tmp_last_V_2_reload_read : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TVALID : STD_LOGIC;
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal tmp_last_V_2_loc_channel_full_n : STD_LOGIC;
    signal tmp_last_V_2_loc_channel_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_2_loc_channel_empty_n : STD_LOGIC;
    signal tmp_4_loc_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_loc_channel_empty_n : STD_LOGIC;
    signal p_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_channel_empty_n : STD_LOGIC;
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_sig_hs_ready : STD_LOGIC;

    component math_accel_Block_ZrsILi32ELb0EE11ap_int_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_TVALID : IN STD_LOGIC;
        in_stream_TREADY : OUT STD_LOGIC;
        in_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        in_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        in_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_stream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        in_stream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp_last_V_2_out_out_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        tmp_last_V_2_out_out_full_n : IN STD_LOGIC;
        tmp_last_V_2_out_out_write : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component math_accel_hls_fptoui_double_i321 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        return_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        return_r_ap_vld : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component math_accel_Block_ZrsILi32ELb0EE11ap_int_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sqrt_res : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_last_V_2_reload_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp_last_V_2_reload_empty_n : IN STD_LOGIC;
        tmp_last_V_2_reload_read : OUT STD_LOGIC;
        out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_TVALID : OUT STD_LOGIC;
        out_stream_TREADY : IN STD_LOGIC;
        out_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_stream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_stream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FIFO_math_accel_tmp_last_V_2_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_math_accel_tmp_4_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_math_accel_p_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component math_accel_control_intr_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    math_accel_control_intr_s_axi_U : component math_accel_control_intr_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_INTR_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_INTR_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_intr_AWVALID,
        AWREADY => s_axi_control_intr_AWREADY,
        AWADDR => s_axi_control_intr_AWADDR,
        WVALID => s_axi_control_intr_WVALID,
        WREADY => s_axi_control_intr_WREADY,
        WDATA => s_axi_control_intr_WDATA,
        WSTRB => s_axi_control_intr_WSTRB,
        ARVALID => s_axi_control_intr_ARVALID,
        ARREADY => s_axi_control_intr_ARREADY,
        ARADDR => s_axi_control_intr_ARADDR,
        RVALID => s_axi_control_intr_RVALID,
        RREADY => s_axi_control_intr_RREADY,
        RDATA => s_axi_control_intr_RDATA,
        RRESP => s_axi_control_intr_RRESP,
        BVALID => s_axi_control_intr_BVALID,
        BREADY => s_axi_control_intr_BREADY,
        BRESP => s_axi_control_intr_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    math_accel_Block_ZrsILi32ELb0EE11ap_int_U0 : component math_accel_Block_ZrsILi32ELb0EE11ap_int_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_start,
        ap_done => math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_done,
        ap_continue => math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_continue,
        ap_idle => math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_idle,
        ap_ready => math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_ready,
        in_stream_TDATA => in_stream_TDATA,
        in_stream_TVALID => in_stream_TVALID,
        in_stream_TREADY => math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_in_stream_TREADY,
        in_stream_TKEEP => in_stream_TKEEP,
        in_stream_TSTRB => in_stream_TSTRB,
        in_stream_TUSER => in_stream_TUSER,
        in_stream_TLAST => in_stream_TLAST,
        in_stream_TID => in_stream_TID,
        in_stream_TDEST => in_stream_TDEST,
        tmp_last_V_2_out_out_din => math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_last_V_2_out_out_din,
        tmp_last_V_2_out_out_full_n => tmp_last_V_2_loc_channel_full_n,
        tmp_last_V_2_out_out_write => math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_last_V_2_out_out_write,
        ap_return => math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_return);

    math_accel_hls_fptoui_double_i321_U0 : component math_accel_hls_fptoui_double_i321
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => math_accel_hls_fptoui_double_i321_U0_ap_start,
        ap_done => math_accel_hls_fptoui_double_i321_U0_ap_done,
        ap_continue => math_accel_hls_fptoui_double_i321_U0_ap_continue,
        ap_idle => math_accel_hls_fptoui_double_i321_U0_ap_idle,
        ap_ready => math_accel_hls_fptoui_double_i321_U0_ap_ready,
        return_r => math_accel_hls_fptoui_double_i321_U0_return_r,
        return_r_ap_vld => math_accel_hls_fptoui_double_i321_U0_return_r_ap_vld,
        p_read => tmp_4_loc_channel_dout);

    math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0 : component math_accel_Block_ZrsILi32ELb0EE11ap_int_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_start,
        ap_done => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_done,
        ap_continue => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_continue,
        ap_idle => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_idle,
        ap_ready => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_ready,
        sqrt_res => p_channel_dout,
        tmp_last_V_2_reload_dout => tmp_last_V_2_loc_channel_dout,
        tmp_last_V_2_reload_empty_n => tmp_last_V_2_loc_channel_empty_n,
        tmp_last_V_2_reload_read => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_tmp_last_V_2_reload_read,
        out_stream_TDATA => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TDATA,
        out_stream_TVALID => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TVALID,
        out_stream_TREADY => out_stream_TREADY,
        out_stream_TKEEP => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TKEEP,
        out_stream_TSTRB => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TSTRB,
        out_stream_TUSER => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TUSER,
        out_stream_TLAST => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TLAST,
        out_stream_TID => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TID,
        out_stream_TDEST => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TDEST);

    tmp_last_V_2_loc_channel_U : component FIFO_math_accel_tmp_last_V_2_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_last_V_2_out_out_din,
        if_full_n => tmp_last_V_2_loc_channel_full_n,
        if_write => math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_last_V_2_out_out_write,
        if_dout => tmp_last_V_2_loc_channel_dout,
        if_empty_n => tmp_last_V_2_loc_channel_empty_n,
        if_read => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_tmp_last_V_2_reload_read);

    tmp_4_loc_channel_U : component FIFO_math_accel_tmp_4_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_return,
        if_full_n => tmp_4_loc_channel_full_n,
        if_write => math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_done,
        if_dout => tmp_4_loc_channel_dout,
        if_empty_n => tmp_4_loc_channel_empty_n,
        if_read => math_accel_hls_fptoui_double_i321_U0_ap_ready);

    p_channel_U : component FIFO_math_accel_p_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => math_accel_hls_fptoui_double_i321_U0_return_r,
        if_full_n => p_channel_full_n,
        if_write => math_accel_hls_fptoui_double_i321_U0_ap_done,
        if_dout => p_channel_dout,
        if_empty_n => p_channel_empty_n,
        if_read => math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_ready);




    ap_chn_write_math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_4_loc_channel <= math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_done;
    ap_chn_write_math_accel_hls_fptoui_double_i321_U0_p_channel <= math_accel_hls_fptoui_double_i321_U0_ap_done;
    ap_done <= ap_sig_hs_done;

    ap_idle_assign_proc : process(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_idle, math_accel_hls_fptoui_double_i321_U0_ap_idle, math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_idle, tmp_4_loc_channel_empty_n, p_channel_empty_n)
    begin
        if (((ap_const_logic_1 = math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_idle) and (ap_const_logic_1 = math_accel_hls_fptoui_double_i321_U0_ap_idle) and (ap_const_logic_1 = math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_idle) and (tmp_4_loc_channel_empty_n = ap_const_logic_0) and (p_channel_empty_n = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    ap_sig_hs_done_assign_proc : process(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_done)
    begin
        if ((ap_const_logic_1 = math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_hs_ready <= math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_ready;
    in_stream_TREADY <= math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_in_stream_TREADY;
    math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_continue <= ap_const_logic_1;
    math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_start <= p_channel_empty_n;
    math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_continue <= tmp_4_loc_channel_full_n;
    math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_start <= ap_start;
    math_accel_hls_fptoui_double_i321_U0_ap_continue <= p_channel_full_n;
    math_accel_hls_fptoui_double_i321_U0_ap_start <= tmp_4_loc_channel_empty_n;
    out_stream_TDATA <= math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TDATA;
    out_stream_TDEST <= math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TDEST;
    out_stream_TID <= math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TID;
    out_stream_TKEEP <= math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TKEEP;
    out_stream_TLAST <= math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TLAST;
    out_stream_TSTRB <= math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TSTRB;
    out_stream_TUSER <= math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TUSER;
    out_stream_TVALID <= math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TVALID;
end behav;
