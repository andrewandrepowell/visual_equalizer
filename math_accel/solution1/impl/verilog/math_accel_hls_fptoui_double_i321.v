// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module math_accel_hls_fptoui_double_i321 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        return_r,
        return_r_ap_vld,
        p_read
);

parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv12_C01 = 12'b110000000001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv11_3FF = 11'b1111111111;
parameter    ap_const_lv32_53 = 32'b1010011;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] return_r;
output   return_r_ap_vld;
input  [63:0] p_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] return_r;
reg return_r_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_19;
reg    ap_sig_33;
wire   [31:0] result_V_fu_157_p3;
reg   [31:0] return_r_preg;
wire   [63:0] p_Val2_s_fu_45_p1;
wire   [51:0] loc_V_1_fu_59_p1;
wire   [52:0] p_Result_s_fu_63_p3;
wire   [10:0] loc_V_fu_49_p4;
wire   [11:0] tmp_i_i_cast_fu_75_p1;
wire   [11:0] sh_assign_fu_79_p2;
wire   [10:0] tmp_8_i_fu_93_p2;
wire   [0:0] isNeg_fu_85_p3;
wire  signed [11:0] tmp_8_i_cast_fu_99_p1;
wire   [11:0] sh_assign_1_fu_103_p3;
wire  signed [31:0] sh_assign_1_i_cast_fu_111_p1;
wire   [52:0] tmp_i_cast_27_fu_115_p1;
wire   [83:0] tmp_i_cast_fu_71_p1;
wire   [83:0] tmp_2_i_cast_fu_125_p1;
wire   [52:0] tmp_1_i_fu_119_p2;
wire   [0:0] tmp_fu_135_p3;
wire   [83:0] tmp_3_i_fu_129_p2;
wire   [31:0] tmp_1_fu_143_p1;
wire   [31:0] tmp_2_fu_147_p4;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'b1;
#0 return_r_preg = 32'b00000000000000000000000000000000;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_33)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        return_r_preg <= ap_const_lv32_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_33)) begin
            return_r_preg <= result_V_fu_157_p3;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_33))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_33)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_33)) begin
        return_r = result_V_fu_157_p3;
    end else begin
        return_r = return_r_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_33)) begin
        return_r_ap_vld = 1'b1;
    end else begin
        return_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_19 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_33 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign isNeg_fu_85_p3 = sh_assign_fu_79_p2[ap_const_lv32_B];

assign loc_V_1_fu_59_p1 = p_Val2_s_fu_45_p1[51:0];

assign loc_V_fu_49_p4 = {{p_Val2_s_fu_45_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign p_Result_s_fu_63_p3 = {{1'b1}, {loc_V_1_fu_59_p1}};

assign p_Val2_s_fu_45_p1 = p_read;

assign result_V_fu_157_p3 = ((isNeg_fu_85_p3[0:0] === 1'b1) ? tmp_1_fu_143_p1 : tmp_2_fu_147_p4);

assign sh_assign_1_fu_103_p3 = ((isNeg_fu_85_p3[0:0] === 1'b1) ? tmp_8_i_cast_fu_99_p1 : sh_assign_fu_79_p2);

assign sh_assign_1_i_cast_fu_111_p1 = $signed(sh_assign_1_fu_103_p3);

assign sh_assign_fu_79_p2 = ($signed(ap_const_lv12_C01) + $signed(tmp_i_i_cast_fu_75_p1));

assign tmp_1_fu_143_p1 = tmp_fu_135_p3;

assign tmp_1_i_fu_119_p2 = p_Result_s_fu_63_p3 >> tmp_i_cast_27_fu_115_p1;

assign tmp_2_fu_147_p4 = {{tmp_3_i_fu_129_p2[ap_const_lv32_53 : ap_const_lv32_34]}};

assign tmp_2_i_cast_fu_125_p1 = $unsigned(sh_assign_1_i_cast_fu_111_p1);

assign tmp_3_i_fu_129_p2 = tmp_i_cast_fu_71_p1 << tmp_2_i_cast_fu_125_p1;

assign tmp_8_i_cast_fu_99_p1 = $signed(tmp_8_i_fu_93_p2);

assign tmp_8_i_fu_93_p2 = (ap_const_lv11_3FF - loc_V_fu_49_p4);

assign tmp_fu_135_p3 = tmp_1_i_fu_119_p2[ap_const_lv32_34];

assign tmp_i_cast_27_fu_115_p1 = $unsigned(sh_assign_1_i_cast_fu_111_p1);

assign tmp_i_cast_fu_71_p1 = p_Result_s_fu_63_p3;

assign tmp_i_i_cast_fu_75_p1 = loc_V_fu_49_p4;

endmodule //math_accel_hls_fptoui_double_i321
