-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity math_accel_hls_fptoui_double_i321 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    return_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    return_r_ap_vld : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of math_accel_hls_fptoui_double_i321 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_19 : BOOLEAN;
    signal ap_sig_33 : BOOLEAN;
    signal result_V_fu_157_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal return_r_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_Val2_s_fu_45_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_1_fu_59_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_s_fu_63_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal loc_V_fu_49_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_cast_fu_75_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_79_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_i_fu_93_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_85_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_i_cast_fu_99_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_103_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_i_cast_fu_111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_cast_27_fu_115_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_cast_fu_71_p1 : STD_LOGIC_VECTOR (83 downto 0);
    signal tmp_2_i_cast_fu_125_p1 : STD_LOGIC_VECTOR (83 downto 0);
    signal tmp_1_i_fu_119_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_fu_135_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_fu_129_p2 : STD_LOGIC_VECTOR (83 downto 0);
    signal tmp_1_fu_143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_147_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_33))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    return_r_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                return_r_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_33))) then 
                    return_r_preg <= result_V_fu_157_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_33)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, ap_sig_33)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_33)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_33))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_19_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_19 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_33_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_33 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_19)
    begin
        if (ap_sig_19) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_85_p3 <= sh_assign_fu_79_p2(11 downto 11);
    loc_V_1_fu_59_p1 <= p_Val2_s_fu_45_p1(52 - 1 downto 0);
    loc_V_fu_49_p4 <= p_Val2_s_fu_45_p1(62 downto 52);
    p_Result_s_fu_63_p3 <= (ap_const_lv1_1 & loc_V_1_fu_59_p1);
    p_Val2_s_fu_45_p1 <= p_read;
    result_V_fu_157_p3 <= 
        tmp_1_fu_143_p1 when (isNeg_fu_85_p3(0) = '1') else 
        tmp_2_fu_147_p4;

    return_r_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_33, result_V_fu_157_p3, return_r_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_33))) then 
            return_r <= result_V_fu_157_p3;
        else 
            return_r <= return_r_preg;
        end if; 
    end process;


    return_r_ap_vld_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_33))) then 
            return_r_ap_vld <= ap_const_logic_1;
        else 
            return_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sh_assign_1_fu_103_p3 <= 
        tmp_8_i_cast_fu_99_p1 when (isNeg_fu_85_p3(0) = '1') else 
        sh_assign_fu_79_p2;
        sh_assign_1_i_cast_fu_111_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_103_p3),32));

    sh_assign_fu_79_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_cast_fu_75_p1));
    tmp_1_fu_143_p1 <= std_logic_vector(resize(unsigned(tmp_fu_135_p3),32));
    tmp_1_i_fu_119_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_63_p3),to_integer(unsigned('0' & tmp_i_cast_27_fu_115_p1(31-1 downto 0)))));
    tmp_2_fu_147_p4 <= tmp_3_i_fu_129_p2(83 downto 52);
    tmp_2_i_cast_fu_125_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_i_cast_fu_111_p1),84));
    tmp_3_i_fu_129_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_cast_fu_71_p1),to_integer(unsigned('0' & tmp_2_i_cast_fu_125_p1(31-1 downto 0)))));
        tmp_8_i_cast_fu_99_p1 <= std_logic_vector(resize(signed(tmp_8_i_fu_93_p2),12));

    tmp_8_i_fu_93_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_49_p4));
    tmp_fu_135_p3 <= tmp_1_i_fu_119_p2(52 downto 52);
    tmp_i_cast_27_fu_115_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_i_cast_fu_111_p1),53));
    tmp_i_cast_fu_71_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_63_p3),84));
    tmp_i_i_cast_fu_75_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_49_p4),12));
end behav;
