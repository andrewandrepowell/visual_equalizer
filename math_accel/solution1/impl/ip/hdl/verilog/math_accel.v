// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="math_accel,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=16.414000,HLS_SYN_LAT=20,HLS_SYN_TPT=21,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=1504,HLS_SYN_LUT=3314}" *)

module math_accel (
        s_axi_control_intr_AWVALID,
        s_axi_control_intr_AWREADY,
        s_axi_control_intr_AWADDR,
        s_axi_control_intr_WVALID,
        s_axi_control_intr_WREADY,
        s_axi_control_intr_WDATA,
        s_axi_control_intr_WSTRB,
        s_axi_control_intr_ARVALID,
        s_axi_control_intr_ARREADY,
        s_axi_control_intr_ARADDR,
        s_axi_control_intr_RVALID,
        s_axi_control_intr_RREADY,
        s_axi_control_intr_RDATA,
        s_axi_control_intr_RRESP,
        s_axi_control_intr_BVALID,
        s_axi_control_intr_BREADY,
        s_axi_control_intr_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        in_stream_TDATA,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TUSER,
        in_stream_TLAST,
        in_stream_TID,
        in_stream_TDEST,
        out_stream_TDATA,
        out_stream_TKEEP,
        out_stream_TSTRB,
        out_stream_TUSER,
        out_stream_TLAST,
        out_stream_TID,
        out_stream_TDEST,
        in_stream_TVALID,
        in_stream_TREADY,
        out_stream_TVALID,
        out_stream_TREADY
);

parameter    C_S_AXI_CONTROL_INTR_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CONTROL_INTR_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv4_0 = 4'b0000;

parameter C_S_AXI_CONTROL_INTR_WSTRB_WIDTH = (C_S_AXI_CONTROL_INTR_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   s_axi_control_intr_AWVALID;
output   s_axi_control_intr_AWREADY;
input  [C_S_AXI_CONTROL_INTR_ADDR_WIDTH - 1 : 0] s_axi_control_intr_AWADDR;
input   s_axi_control_intr_WVALID;
output   s_axi_control_intr_WREADY;
input  [C_S_AXI_CONTROL_INTR_DATA_WIDTH - 1 : 0] s_axi_control_intr_WDATA;
input  [C_S_AXI_CONTROL_INTR_WSTRB_WIDTH - 1 : 0] s_axi_control_intr_WSTRB;
input   s_axi_control_intr_ARVALID;
output   s_axi_control_intr_ARREADY;
input  [C_S_AXI_CONTROL_INTR_ADDR_WIDTH - 1 : 0] s_axi_control_intr_ARADDR;
output   s_axi_control_intr_RVALID;
input   s_axi_control_intr_RREADY;
output  [C_S_AXI_CONTROL_INTR_DATA_WIDTH - 1 : 0] s_axi_control_intr_RDATA;
output  [1:0] s_axi_control_intr_RRESP;
output   s_axi_control_intr_BVALID;
input   s_axi_control_intr_BREADY;
output  [1:0] s_axi_control_intr_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
input  [31:0] in_stream_TDATA;
input  [3:0] in_stream_TKEEP;
input  [3:0] in_stream_TSTRB;
input  [0:0] in_stream_TUSER;
input  [0:0] in_stream_TLAST;
input  [0:0] in_stream_TID;
input  [0:0] in_stream_TDEST;
output  [31:0] out_stream_TDATA;
output  [3:0] out_stream_TKEEP;
output  [3:0] out_stream_TSTRB;
output  [0:0] out_stream_TUSER;
output  [0:0] out_stream_TLAST;
output  [0:0] out_stream_TID;
output  [0:0] out_stream_TDEST;
input   in_stream_TVALID;
output   in_stream_TREADY;
output   out_stream_TVALID;
input   out_stream_TREADY;

reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
reg    ap_idle;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_start;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_done;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_continue;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_idle;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_ready;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_in_stream_TREADY;
wire   [0:0] math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_last_V_2_out_out_din;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_last_V_2_out_out_write;
wire   [63:0] math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_return;
wire    ap_chn_write_math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_4_loc_channel;
wire    tmp_4_loc_channel_full_n;
wire    math_accel_hls_fptoui_double_i321_U0_ap_start;
wire    math_accel_hls_fptoui_double_i321_U0_ap_done;
wire    math_accel_hls_fptoui_double_i321_U0_ap_continue;
wire    math_accel_hls_fptoui_double_i321_U0_ap_idle;
wire    math_accel_hls_fptoui_double_i321_U0_ap_ready;
wire   [31:0] math_accel_hls_fptoui_double_i321_U0_return_r;
wire    math_accel_hls_fptoui_double_i321_U0_return_r_ap_vld;
wire    ap_chn_write_math_accel_hls_fptoui_double_i321_U0_p_channel;
wire    p_channel_full_n;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_start;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_done;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_continue;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_idle;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_ready;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_tmp_last_V_2_reload_read;
wire   [31:0] math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TDATA;
wire    math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TVALID;
wire   [3:0] math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TKEEP;
wire   [3:0] math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TSTRB;
wire   [0:0] math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TUSER;
wire   [0:0] math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TLAST;
wire   [0:0] math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TID;
wire   [0:0] math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TDEST;
wire    ap_sig_hs_continue;
wire    tmp_last_V_2_loc_channel_full_n;
wire   [0:0] tmp_last_V_2_loc_channel_dout;
wire    tmp_last_V_2_loc_channel_empty_n;
wire   [63:0] tmp_4_loc_channel_dout;
wire    tmp_4_loc_channel_empty_n;
wire   [31:0] p_channel_dout;
wire    p_channel_empty_n;
reg    ap_sig_hs_done;
wire    ap_sig_hs_ready;

math_accel_control_intr_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_INTR_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_INTR_DATA_WIDTH ))
math_accel_control_intr_s_axi_U(
    .AWVALID(s_axi_control_intr_AWVALID),
    .AWREADY(s_axi_control_intr_AWREADY),
    .AWADDR(s_axi_control_intr_AWADDR),
    .WVALID(s_axi_control_intr_WVALID),
    .WREADY(s_axi_control_intr_WREADY),
    .WDATA(s_axi_control_intr_WDATA),
    .WSTRB(s_axi_control_intr_WSTRB),
    .ARVALID(s_axi_control_intr_ARVALID),
    .ARREADY(s_axi_control_intr_ARREADY),
    .ARADDR(s_axi_control_intr_ARADDR),
    .RVALID(s_axi_control_intr_RVALID),
    .RREADY(s_axi_control_intr_RREADY),
    .RDATA(s_axi_control_intr_RDATA),
    .RRESP(s_axi_control_intr_RRESP),
    .BVALID(s_axi_control_intr_BVALID),
    .BREADY(s_axi_control_intr_BREADY),
    .BRESP(s_axi_control_intr_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

math_accel_Block_ZrsILi32ELb0EE11ap_int_s math_accel_Block_ZrsILi32ELb0EE11ap_int_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_start),
    .ap_done(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_done),
    .ap_continue(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_continue),
    .ap_idle(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_idle),
    .ap_ready(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_ready),
    .in_stream_TDATA(in_stream_TDATA),
    .in_stream_TVALID(in_stream_TVALID),
    .in_stream_TREADY(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_in_stream_TREADY),
    .in_stream_TKEEP(in_stream_TKEEP),
    .in_stream_TSTRB(in_stream_TSTRB),
    .in_stream_TUSER(in_stream_TUSER),
    .in_stream_TLAST(in_stream_TLAST),
    .in_stream_TID(in_stream_TID),
    .in_stream_TDEST(in_stream_TDEST),
    .tmp_last_V_2_out_out_din(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_last_V_2_out_out_din),
    .tmp_last_V_2_out_out_full_n(tmp_last_V_2_loc_channel_full_n),
    .tmp_last_V_2_out_out_write(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_last_V_2_out_out_write),
    .ap_return(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_return)
);

math_accel_hls_fptoui_double_i321 math_accel_hls_fptoui_double_i321_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(math_accel_hls_fptoui_double_i321_U0_ap_start),
    .ap_done(math_accel_hls_fptoui_double_i321_U0_ap_done),
    .ap_continue(math_accel_hls_fptoui_double_i321_U0_ap_continue),
    .ap_idle(math_accel_hls_fptoui_double_i321_U0_ap_idle),
    .ap_ready(math_accel_hls_fptoui_double_i321_U0_ap_ready),
    .return_r(math_accel_hls_fptoui_double_i321_U0_return_r),
    .return_r_ap_vld(math_accel_hls_fptoui_double_i321_U0_return_r_ap_vld),
    .p_read(tmp_4_loc_channel_dout)
);

math_accel_Block_ZrsILi32ELb0EE11ap_int_1 math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_start),
    .ap_done(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_done),
    .ap_continue(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_continue),
    .ap_idle(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_idle),
    .ap_ready(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_ready),
    .sqrt_res(p_channel_dout),
    .tmp_last_V_2_reload_dout(tmp_last_V_2_loc_channel_dout),
    .tmp_last_V_2_reload_empty_n(tmp_last_V_2_loc_channel_empty_n),
    .tmp_last_V_2_reload_read(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_tmp_last_V_2_reload_read),
    .out_stream_TDATA(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TDATA),
    .out_stream_TVALID(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TVALID),
    .out_stream_TREADY(out_stream_TREADY),
    .out_stream_TKEEP(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TKEEP),
    .out_stream_TSTRB(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TSTRB),
    .out_stream_TUSER(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TUSER),
    .out_stream_TLAST(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TLAST),
    .out_stream_TID(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TID),
    .out_stream_TDEST(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TDEST)
);

FIFO_math_accel_tmp_last_V_2_loc_channel tmp_last_V_2_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_last_V_2_out_out_din),
    .if_full_n(tmp_last_V_2_loc_channel_full_n),
    .if_write(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_last_V_2_out_out_write),
    .if_dout(tmp_last_V_2_loc_channel_dout),
    .if_empty_n(tmp_last_V_2_loc_channel_empty_n),
    .if_read(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_tmp_last_V_2_reload_read)
);

FIFO_math_accel_tmp_4_loc_channel tmp_4_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_return),
    .if_full_n(tmp_4_loc_channel_full_n),
    .if_write(math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_done),
    .if_dout(tmp_4_loc_channel_dout),
    .if_empty_n(tmp_4_loc_channel_empty_n),
    .if_read(math_accel_hls_fptoui_double_i321_U0_ap_ready)
);

FIFO_math_accel_p_channel p_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(math_accel_hls_fptoui_double_i321_U0_return_r),
    .if_full_n(p_channel_full_n),
    .if_write(math_accel_hls_fptoui_double_i321_U0_ap_done),
    .if_dout(p_channel_dout),
    .if_empty_n(p_channel_empty_n),
    .if_read(math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_ready)
);

always @ (*) begin
    if (((1'b1 == math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_idle) & (1'b1 == math_accel_hls_fptoui_double_i321_U0_ap_idle) & (1'b1 == math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_idle) & (tmp_4_loc_channel_empty_n == 1'b0) & (p_channel_empty_n == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_done)) begin
        ap_sig_hs_done = 1'b1;
    end else begin
        ap_sig_hs_done = 1'b0;
    end
end

assign ap_chn_write_math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_tmp_4_loc_channel = math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_done;

assign ap_chn_write_math_accel_hls_fptoui_double_i321_U0_p_channel = math_accel_hls_fptoui_double_i321_U0_ap_done;

assign ap_done = ap_sig_hs_done;

assign ap_ready = math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sig_hs_continue = 1'b1;

assign ap_sig_hs_ready = math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_ready;

assign in_stream_TREADY = math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_in_stream_TREADY;

assign math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_continue = 1'b1;

assign math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_ap_start = p_channel_empty_n;

assign math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_continue = tmp_4_loc_channel_full_n;

assign math_accel_Block_ZrsILi32ELb0EE11ap_int_U0_ap_start = ap_start;

assign math_accel_hls_fptoui_double_i321_U0_ap_continue = p_channel_full_n;

assign math_accel_hls_fptoui_double_i321_U0_ap_start = tmp_4_loc_channel_empty_n;

assign out_stream_TDATA = math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TDATA;

assign out_stream_TDEST = math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TDEST;

assign out_stream_TID = math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TID;

assign out_stream_TKEEP = math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TKEEP;

assign out_stream_TLAST = math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TLAST;

assign out_stream_TSTRB = math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TSTRB;

assign out_stream_TUSER = math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TUSER;

assign out_stream_TVALID = math_accel_Block_ZrsILi32ELb0EE11ap_int_1_U0_out_stream_TVALID;

endmodule //math_accel
