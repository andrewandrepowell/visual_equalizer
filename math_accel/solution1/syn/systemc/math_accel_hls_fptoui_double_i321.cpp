// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "math_accel_hls_fptoui_double_i321.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic math_accel_hls_fptoui_double_i321::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic math_accel_hls_fptoui_double_i321::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> math_accel_hls_fptoui_double_i321::ap_ST_st1_fsm_0 = "1";
const sc_lv<32> math_accel_hls_fptoui_double_i321::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> math_accel_hls_fptoui_double_i321::ap_const_lv1_1 = "1";
const sc_lv<32> math_accel_hls_fptoui_double_i321::ap_const_lv32_34 = "110100";
const sc_lv<32> math_accel_hls_fptoui_double_i321::ap_const_lv32_3E = "111110";
const sc_lv<12> math_accel_hls_fptoui_double_i321::ap_const_lv12_C01 = "110000000001";
const sc_lv<32> math_accel_hls_fptoui_double_i321::ap_const_lv32_B = "1011";
const sc_lv<11> math_accel_hls_fptoui_double_i321::ap_const_lv11_3FF = "1111111111";
const sc_lv<32> math_accel_hls_fptoui_double_i321::ap_const_lv32_53 = "1010011";

math_accel_hls_fptoui_double_i321::math_accel_hls_fptoui_double_i321(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_33 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_33 );

    SC_METHOD(thread_ap_sig_19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_33);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_19 );

    SC_METHOD(thread_isNeg_fu_85_p3);
    sensitive << ( sh_assign_fu_79_p2 );

    SC_METHOD(thread_loc_V_1_fu_59_p1);
    sensitive << ( p_Val2_s_fu_45_p1 );

    SC_METHOD(thread_loc_V_fu_49_p4);
    sensitive << ( p_Val2_s_fu_45_p1 );

    SC_METHOD(thread_p_Result_s_fu_63_p3);
    sensitive << ( loc_V_1_fu_59_p1 );

    SC_METHOD(thread_p_Val2_s_fu_45_p1);
    sensitive << ( p_read );

    SC_METHOD(thread_result_V_fu_157_p3);
    sensitive << ( isNeg_fu_85_p3 );
    sensitive << ( tmp_1_fu_143_p1 );
    sensitive << ( tmp_2_fu_147_p4 );

    SC_METHOD(thread_return_r);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_33 );
    sensitive << ( result_V_fu_157_p3 );
    sensitive << ( return_r_preg );

    SC_METHOD(thread_return_r_ap_vld);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_33 );

    SC_METHOD(thread_sh_assign_1_fu_103_p3);
    sensitive << ( sh_assign_fu_79_p2 );
    sensitive << ( isNeg_fu_85_p3 );
    sensitive << ( tmp_8_i_cast_fu_99_p1 );

    SC_METHOD(thread_sh_assign_1_i_cast_fu_111_p1);
    sensitive << ( sh_assign_1_fu_103_p3 );

    SC_METHOD(thread_sh_assign_fu_79_p2);
    sensitive << ( tmp_i_i_cast_fu_75_p1 );

    SC_METHOD(thread_tmp_1_fu_143_p1);
    sensitive << ( tmp_fu_135_p3 );

    SC_METHOD(thread_tmp_1_i_fu_119_p2);
    sensitive << ( p_Result_s_fu_63_p3 );
    sensitive << ( tmp_i_cast_27_fu_115_p1 );

    SC_METHOD(thread_tmp_2_fu_147_p4);
    sensitive << ( tmp_3_i_fu_129_p2 );

    SC_METHOD(thread_tmp_2_i_cast_fu_125_p1);
    sensitive << ( sh_assign_1_i_cast_fu_111_p1 );

    SC_METHOD(thread_tmp_3_i_fu_129_p2);
    sensitive << ( tmp_i_cast_fu_71_p1 );
    sensitive << ( tmp_2_i_cast_fu_125_p1 );

    SC_METHOD(thread_tmp_8_i_cast_fu_99_p1);
    sensitive << ( tmp_8_i_fu_93_p2 );

    SC_METHOD(thread_tmp_8_i_fu_93_p2);
    sensitive << ( loc_V_fu_49_p4 );

    SC_METHOD(thread_tmp_fu_135_p3);
    sensitive << ( tmp_1_i_fu_119_p2 );

    SC_METHOD(thread_tmp_i_cast_27_fu_115_p1);
    sensitive << ( sh_assign_1_i_cast_fu_111_p1 );

    SC_METHOD(thread_tmp_i_cast_fu_71_p1);
    sensitive << ( p_Result_s_fu_63_p3 );

    SC_METHOD(thread_tmp_i_i_cast_fu_75_p1);
    sensitive << ( loc_V_fu_49_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_33 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    return_r_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "math_accel_hls_fptoui_double_i321_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, return_r, "(port)return_r");
    sc_trace(mVcdFile, return_r_ap_vld, "(port)return_r_ap_vld");
    sc_trace(mVcdFile, p_read, "(port)p_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_19, "ap_sig_19");
    sc_trace(mVcdFile, ap_sig_33, "ap_sig_33");
    sc_trace(mVcdFile, result_V_fu_157_p3, "result_V_fu_157_p3");
    sc_trace(mVcdFile, return_r_preg, "return_r_preg");
    sc_trace(mVcdFile, p_Val2_s_fu_45_p1, "p_Val2_s_fu_45_p1");
    sc_trace(mVcdFile, loc_V_1_fu_59_p1, "loc_V_1_fu_59_p1");
    sc_trace(mVcdFile, p_Result_s_fu_63_p3, "p_Result_s_fu_63_p3");
    sc_trace(mVcdFile, loc_V_fu_49_p4, "loc_V_fu_49_p4");
    sc_trace(mVcdFile, tmp_i_i_cast_fu_75_p1, "tmp_i_i_cast_fu_75_p1");
    sc_trace(mVcdFile, sh_assign_fu_79_p2, "sh_assign_fu_79_p2");
    sc_trace(mVcdFile, tmp_8_i_fu_93_p2, "tmp_8_i_fu_93_p2");
    sc_trace(mVcdFile, isNeg_fu_85_p3, "isNeg_fu_85_p3");
    sc_trace(mVcdFile, tmp_8_i_cast_fu_99_p1, "tmp_8_i_cast_fu_99_p1");
    sc_trace(mVcdFile, sh_assign_1_fu_103_p3, "sh_assign_1_fu_103_p3");
    sc_trace(mVcdFile, sh_assign_1_i_cast_fu_111_p1, "sh_assign_1_i_cast_fu_111_p1");
    sc_trace(mVcdFile, tmp_i_cast_27_fu_115_p1, "tmp_i_cast_27_fu_115_p1");
    sc_trace(mVcdFile, tmp_i_cast_fu_71_p1, "tmp_i_cast_fu_71_p1");
    sc_trace(mVcdFile, tmp_2_i_cast_fu_125_p1, "tmp_2_i_cast_fu_125_p1");
    sc_trace(mVcdFile, tmp_1_i_fu_119_p2, "tmp_1_i_fu_119_p2");
    sc_trace(mVcdFile, tmp_fu_135_p3, "tmp_fu_135_p3");
    sc_trace(mVcdFile, tmp_3_i_fu_129_p2, "tmp_3_i_fu_129_p2");
    sc_trace(mVcdFile, tmp_1_fu_143_p1, "tmp_1_fu_143_p1");
    sc_trace(mVcdFile, tmp_2_fu_147_p4, "tmp_2_fu_147_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

math_accel_hls_fptoui_double_i321::~math_accel_hls_fptoui_double_i321() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void math_accel_hls_fptoui_double_i321::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                    !ap_sig_33.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        return_r_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_33.read())) {
            return_r_preg = result_V_fu_157_p3.read();
        }
    }
}

void math_accel_hls_fptoui_double_i321::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !ap_sig_33.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void math_accel_hls_fptoui_double_i321::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void math_accel_hls_fptoui_double_i321::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_33.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void math_accel_hls_fptoui_double_i321::thread_ap_sig_19() {
    ap_sig_19 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void math_accel_hls_fptoui_double_i321::thread_ap_sig_33() {
    ap_sig_33 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void math_accel_hls_fptoui_double_i321::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_19.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void math_accel_hls_fptoui_double_i321::thread_isNeg_fu_85_p3() {
    isNeg_fu_85_p3 = sh_assign_fu_79_p2.read().range(11, 11);
}

void math_accel_hls_fptoui_double_i321::thread_loc_V_1_fu_59_p1() {
    loc_V_1_fu_59_p1 = p_Val2_s_fu_45_p1.read().range(52-1, 0);
}

void math_accel_hls_fptoui_double_i321::thread_loc_V_fu_49_p4() {
    loc_V_fu_49_p4 = p_Val2_s_fu_45_p1.read().range(62, 52);
}

void math_accel_hls_fptoui_double_i321::thread_p_Result_s_fu_63_p3() {
    p_Result_s_fu_63_p3 = esl_concat<1,52>(ap_const_lv1_1, loc_V_1_fu_59_p1.read());
}

void math_accel_hls_fptoui_double_i321::thread_p_Val2_s_fu_45_p1() {
    p_Val2_s_fu_45_p1 = p_read.read();
}

void math_accel_hls_fptoui_double_i321::thread_result_V_fu_157_p3() {
    result_V_fu_157_p3 = (!isNeg_fu_85_p3.read()[0].is_01())? sc_lv<32>(): ((isNeg_fu_85_p3.read()[0].to_bool())? tmp_1_fu_143_p1.read(): tmp_2_fu_147_p4.read());
}

void math_accel_hls_fptoui_double_i321::thread_return_r() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_33.read())) {
        return_r = result_V_fu_157_p3.read();
    } else {
        return_r = return_r_preg.read();
    }
}

void math_accel_hls_fptoui_double_i321::thread_return_r_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_33.read())) {
        return_r_ap_vld = ap_const_logic_1;
    } else {
        return_r_ap_vld = ap_const_logic_0;
    }
}

void math_accel_hls_fptoui_double_i321::thread_sh_assign_1_fu_103_p3() {
    sh_assign_1_fu_103_p3 = (!isNeg_fu_85_p3.read()[0].is_01())? sc_lv<12>(): ((isNeg_fu_85_p3.read()[0].to_bool())? tmp_8_i_cast_fu_99_p1.read(): sh_assign_fu_79_p2.read());
}

void math_accel_hls_fptoui_double_i321::thread_sh_assign_1_i_cast_fu_111_p1() {
    sh_assign_1_i_cast_fu_111_p1 = esl_sext<32,12>(sh_assign_1_fu_103_p3.read());
}

void math_accel_hls_fptoui_double_i321::thread_sh_assign_fu_79_p2() {
    sh_assign_fu_79_p2 = (!ap_const_lv12_C01.is_01() || !tmp_i_i_cast_fu_75_p1.read().is_01())? sc_lv<12>(): (sc_bigint<12>(ap_const_lv12_C01) + sc_biguint<12>(tmp_i_i_cast_fu_75_p1.read()));
}

void math_accel_hls_fptoui_double_i321::thread_tmp_1_fu_143_p1() {
    tmp_1_fu_143_p1 = esl_zext<32,1>(tmp_fu_135_p3.read());
}

void math_accel_hls_fptoui_double_i321::thread_tmp_1_i_fu_119_p2() {
    tmp_1_i_fu_119_p2 = (!tmp_i_cast_27_fu_115_p1.read().is_01())? sc_lv<53>(): p_Result_s_fu_63_p3.read() >> (unsigned short)tmp_i_cast_27_fu_115_p1.read().to_uint();
}

void math_accel_hls_fptoui_double_i321::thread_tmp_2_fu_147_p4() {
    tmp_2_fu_147_p4 = tmp_3_i_fu_129_p2.read().range(83, 52);
}

void math_accel_hls_fptoui_double_i321::thread_tmp_2_i_cast_fu_125_p1() {
    tmp_2_i_cast_fu_125_p1 = esl_zext<84,32>(sh_assign_1_i_cast_fu_111_p1.read());
}

void math_accel_hls_fptoui_double_i321::thread_tmp_3_i_fu_129_p2() {
    tmp_3_i_fu_129_p2 = (!tmp_2_i_cast_fu_125_p1.read().is_01())? sc_lv<84>(): tmp_i_cast_fu_71_p1.read() << (unsigned short)tmp_2_i_cast_fu_125_p1.read().to_uint();
}

void math_accel_hls_fptoui_double_i321::thread_tmp_8_i_cast_fu_99_p1() {
    tmp_8_i_cast_fu_99_p1 = esl_sext<12,11>(tmp_8_i_fu_93_p2.read());
}

void math_accel_hls_fptoui_double_i321::thread_tmp_8_i_fu_93_p2() {
    tmp_8_i_fu_93_p2 = (!ap_const_lv11_3FF.is_01() || !loc_V_fu_49_p4.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_3FF) - sc_biguint<11>(loc_V_fu_49_p4.read()));
}

void math_accel_hls_fptoui_double_i321::thread_tmp_fu_135_p3() {
    tmp_fu_135_p3 = tmp_1_i_fu_119_p2.read().range(52, 52);
}

void math_accel_hls_fptoui_double_i321::thread_tmp_i_cast_27_fu_115_p1() {
    tmp_i_cast_27_fu_115_p1 = esl_zext<53,32>(sh_assign_1_i_cast_fu_111_p1.read());
}

void math_accel_hls_fptoui_double_i321::thread_tmp_i_cast_fu_71_p1() {
    tmp_i_cast_fu_71_p1 = esl_zext<84,53>(p_Result_s_fu_63_p3.read());
}

void math_accel_hls_fptoui_double_i321::thread_tmp_i_i_cast_fu_75_p1() {
    tmp_i_i_cast_fu_75_p1 = esl_zext<12,11>(loc_V_fu_49_p4.read());
}

void math_accel_hls_fptoui_double_i321::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

