#ifndef SHARED_H_
#define SHARED_H_

#include <stddef.h>
#include <stdint.h>

#define BUFFER_BASE_ADDR				( 0x00000000 )
#define BUFFER_LOG2LEN					( 4 )
#define BUFFER_LEN						( 1 << BUFFER_LOG2LEN )
#define BUFFER_DELAY					( 0 )
#define BUFFER_SET_LEN					( 2 )
#define BUFFER_GET_ADDR(i)				( reinterpret_cast<BUFFER_TYPE*>( BUFFER_BASE_ADDR+(sizeof(BUFFER_ARY_TYPE)*(i)) ) )

namespace shared
{

	typedef uint32_t BUFFER_TYPE;
	typedef BUFFER_TYPE (BUFFER_ARY_TYPE)[ BUFFER_LEN+BUFFER_DELAY ];

	class buffer
	{
	public:
		buffer() :
			ref( *reinterpret_cast<BUFFER_ARY_TYPE*>( NULL ) ), curr( BUFFER_DELAY ) { }
		buffer( BUFFER_TYPE* ptr ) :
			ref( *reinterpret_cast<BUFFER_ARY_TYPE*>( ptr ) ),
			curr( 0 ) { }
		~buffer( ) { }
		bool push( BUFFER_TYPE val )
		{
			ref[ curr ] = val;
			if ( curr==(BUFFER_LEN-1) )
			{
				curr = 0;
				return true;
			}
			else
			{
				curr++;
				return false;
			}
		}
		BUFFER_ARY_TYPE& getref() { return ref; }
		BUFFER_ARY_TYPE* getptr() { return &ref; }
		uint32_t getaddr() { return reinterpret_cast<uint32_t>( &ref ); }
	private:
		BUFFER_ARY_TYPE& ref;
		size_t curr;
	};

	class bufferset
	{
	public:
		bufferset() { }
		bufferset( BUFFER_TYPE* in_buff_ptr, BUFFER_TYPE* out_buff_ptr ) :
			in( in_buff_ptr ), out( out_buff_ptr ) { }
		~bufferset() { }
		buffer& getinput() { return in; }
		buffer& getouput() { return out; }
	private:
		buffer in;
		buffer out;
	};

	bufferset& getbufferset();
	void incbufferset();
};

#endif
